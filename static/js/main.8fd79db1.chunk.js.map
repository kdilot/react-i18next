{"version":3,"sources":["assets/lang/i18n.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["resource","en","translation","ko","currentLang","localStorage","getItem","i18n","use","initReactI18next","init","resources","lng","fallbackLng","debug","keySeparator","interpolation","escapeValue","onLanguage","i18next","changeLanguage","setItem","Container","styled","div","LanguageContainer","LanguageBox","TextBox","LocalStatus","p","App","t","useTranslation","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4YAKMA,EAAW,CACbC,GAAI,CAAEC,Y,OACNC,GAAI,CAAED,Y,QAGJE,EAAcC,aAAaC,QAAQ,QAEzCC,IAAKC,IAAIC,KAAkBC,KAAK,CAC5BC,UAAWX,EACXY,IAAKR,GAA4B,KACjCS,YAAa,KACbC,OAAO,EACPC,cAAc,EACdC,cAAe,CAAEC,aAAa,KAGnBV,QAAf,E,w+BCfA,IAAMW,EAAa,SAACN,GAChBO,EAAQC,eAAeR,GACvBP,aAAagB,QAAQ,OAAQT,IA8B3BU,EAAYC,IAAOC,IAAV,KAQTC,EAAoBF,IAAOC,IAAV,KAQjBE,EAAcH,IAAOC,IAAV,KAgBXG,EAAUJ,IAAOC,IAAV,KAMPI,EAAcL,IAAOM,EAAV,KAEFC,EAnEO,WAClB,IAAM1B,EAAcC,aAAaC,QAAQ,QAEjCyB,EAAMC,cAAND,EACR,OACI,kBAACT,EAAD,KACI,6DACA,kBAACG,EAAD,KACI,kBAACC,EAAD,CACIO,UACoB,OAAhB7B,GAAyBA,EAA2B,GAAb,WAE3C8B,QAAS,kBAAMhB,EAAW,QAJ9B,sBAOA,kBAACQ,EAAD,CACIO,UAA2B,OAAhB7B,EAAuB,WAAa,GAC/C8B,QAAS,kBAAMhB,EAAW,QAF9B,YAMJ,kBAACS,EAAD,KAAUI,EAAE,UACZ,kBAACH,EAAD,oCAAsCxB,MCrB9B+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8fd79db1.chunk.js","sourcesContent":["import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport en from './en.json';\r\nimport ko from './ko.json';\r\n\r\nconst resource = {\r\n    en: { translation: en },\r\n    ko: { translation: ko },\r\n};\r\n\r\nconst currentLang = localStorage.getItem('lang');\r\n\r\ni18n.use(initReactI18next).init({\r\n    resources: resource,\r\n    lng: currentLang ? currentLang : 'ko',\r\n    fallbackLng: 'ko',\r\n    debug: true,\r\n    keySeparator: false,\r\n    interpolation: { escapeValue: false },\r\n});\r\n\r\nexport default i18n;\r\n","import React from 'react';\nimport i18next from 'assets/lang/i18n';\nimport styled from 'styled-components';\nimport 'assets/lang/i18n';\nimport { useTranslation } from 'react-i18next';\n\nconst onLanguage = (lng: string) => {\n    i18next.changeLanguage(lng);\n    localStorage.setItem('lang', lng);\n};\n\nconst App: React.FC = () => {\n    const currentLang = localStorage.getItem('lang');\n\n    const { t } = useTranslation();\n    return (\n        <Container>\n            <h1>React i18next w/ LocalStorage</h1>\n            <LanguageContainer>\n                <LanguageBox\n                    className={\n                        currentLang === 'ko' || !currentLang ? 'selected' : ''\n                    }\n                    onClick={() => onLanguage('ko')}>\n                    한국어\n                </LanguageBox>\n                <LanguageBox\n                    className={currentLang === 'en' ? 'selected' : ''}\n                    onClick={() => onLanguage('en')}>\n                    English\n                </LanguageBox>\n            </LanguageContainer>\n            <TextBox>{t('hello')}</TextBox>\n            <LocalStatus>{`LocalStorage value : ${currentLang}`}</LocalStatus>\n        </Container>\n    );\n};\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst LanguageContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    margin-top: 2rem;\n`;\n\nconst LanguageBox = styled.div`\n    cursor: pointer;\n    color: rgba(0, 0, 0, 0.7);\n    font-size: 1rem;\n    border-bottom: 2px solid white;\n    & ~ div {\n        margin-left: 1rem;\n    }\n    &.selected {\n        color: rgba(0, 0, 0, 1);\n        border-bottom: 2px solid black;\n        font-weight: bold;\n    }\n    margin-bottom: 1rem;\n`;\n\nconst TextBox = styled.div`\n    padding: 1rem;\n    background: lightgray;\n    border-radius: 4px;\n`;\n\nconst LocalStatus = styled.p``;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}